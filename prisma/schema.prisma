generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int     @id @default(autoincrement())
  name       String
  email      String  @unique
  password   String
  about      String?
  profileUrl String?
  coverUrl   String?

  posts           Post[]
  postInteraction PostInteraction[]
  comments        Comment[]
  conversations   UserConversation[]
  Message         Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id               Int               @id @default(autoincrement())
  title            String
  content          String?
  imgUrl           String[]
  postInteractions PostInteraction[]
  comments         Comment[]
  userId           Int
  user             User              @relation(fields: [userId], references: [id])
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model PostInteraction {
  id     Int     @id @default(autoincrement())
  liked  Boolean // True if liked, false if unliked
  user   User    @relation(fields: [userId], references: [id])
  userId Int
  post   Post    @relation(fields: [postId], references: [id])
  postId Int

  @@unique([userId, postId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  userId    Int
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserConversation {
  id             Int          @id @default(autoincrement())
  userId         Int
  conversationId Int
  user           User         @relation(fields: [userId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  createdAt      DateTime     @default(now())

  @@unique([userId, conversationId])
}

model Conversation {
  id        Int                @id @default(autoincrement())
  users     UserConversation[]
  messages  Message[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @default(now())
}

model Message {
  id             Int          @id @default(autoincrement())
  content        String
  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  senderId       Int
  sender         User         @relation(fields: [senderId], references: [id])
  createdAt      DateTime     @default(now())
}
